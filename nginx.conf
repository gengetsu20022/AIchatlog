# ==========================================
# あいろぐ 本番用 Nginx 設定
# ==========================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # ==========================================
    # 基本設定
    # ==========================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # ログ形式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # ==========================================
    # パフォーマンス設定
    # ==========================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # ファイルアップロード制限
    client_max_body_size 10M;
    client_body_timeout 60;
    client_header_timeout 60;
    
    # レート制限設定
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=static:10m rate=100r/m;
    
    # ==========================================
    # セキュリティ設定
    # ==========================================
    # サーバー情報を隠す
    server_tokens off;
    
    # セキュリティヘッダーを読み込み
    include /etc/nginx/conf.d/security-headers.conf;
    
    # ==========================================
    # Gzip圧縮
    # ==========================================
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/wasm;
    
    # ==========================================
    # HTTPからHTTPSへのリダイレクト
    # ==========================================
    server {
        listen 80;
        server_name localhost;
        return 301 https://$server_name$request_uri;
    }

    # ==========================================
    # メインサーバー設定（HTTPS）
    # ==========================================
    server {
        listen 443 ssl http2;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # SSL設定（本番環境では適切な証明書を設定）
        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # ==========================================
        # セキュリティヘッダー
        # ==========================================
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), bluetooth=(), magnetometer=(), gyroscope=(), accelerometer=()" always;
        
        # Content Security Policy (強化版)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://apis.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://*.googleapis.com https://*.firebase.googleapis.com wss://*.firebase.googleapis.com; frame-src https://accounts.google.com; object-src 'none'; base-uri 'self'; form-action 'self';" always;
        
        # ==========================================
        # Flutter Web のルーティング設定
        # ==========================================
        location / {
            # レート制限適用
            limit_req zone=api burst=10 nodelay;
            
            try_files $uri $uri/ /index.html;
            
            # キャッシュ設定
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }
        
        # ==========================================
        # 静的ファイルのキャッシュ設定
        # ==========================================
        # JavaScript, CSS, フォント - 長期キャッシュ
        location ~* \.(js|css|woff|woff2|ttf|eot)$ {
            # 静的ファイル用レート制限
            limit_req zone=static burst=50 nodelay;
            
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
        
        # 画像ファイル - 中期キャッシュ
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
            expires 30d;
            add_header Cache-Control "public";
            access_log off;
        }
        
        # manifest.json - 短期キャッシュ
        location = /manifest.json {
            expires 1d;
            add_header Cache-Control "public";
        }
        
        # ==========================================
        # セキュリティ: 不要なファイルへのアクセスを拒否
        # ==========================================
        # ドットファイルを隠す
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # バックアップファイルを隠す
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # ==========================================
        # API パスの処理（将来の拡張用）
        # ==========================================
        location /api/ {
            # 将来的にAPI サーバーにプロキシする場合
            return 404;
        }
        
        # ==========================================
        # ヘルスチェック
        # ==========================================
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # ==========================================
        # エラーページ
        # ==========================================
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
} 